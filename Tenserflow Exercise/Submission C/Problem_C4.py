# -*- coding: utf-8 -*-
"""Problem_C4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Gmo5ZgEK2uJFcvfgHvSZYv3lQSgFQked
"""

# =====================================================================================================
# PROBLEM C4 
#
# Build and train a classifier for the sarcasm dataset. 
# The classifier should have a final layer with 1 neuron activated by sigmoid.
# 
# Do not use lambda layers in your model.
# 
# Dataset used in this problem is built by Rishabh Misra (https://rishabhmisra.github.io/publications).
#
# Desired accuracy and validation_accuracy > 75%
# =======================================================================================================

import json
import tensorflow as tf
import numpy as np
import urllib
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences


def solution_C4():
    data_url = 'https://storage.googleapis.com/laurencemoroney-blog.appspot.com/sarcasm.json'
    urllib.request.urlretrieve(data_url, 'sarcasm.json')

    vocab_size = 1000
    embedding_dim = 16
    max_length = 120
    trunc_type='post'
    padding_type='post'
    oov_tok = "<OOV>"
    training_size = 20000

    sentences = []
    labels = []
    # YOUR CODE HERE

    with open('sarcasm.json','r') as thefile:
        read=json.load(thefile)
    
    for content in read:
        sentences.append(content['headline'])
        labels.append(content['is_sarcastic'])

    training_text=sentences[:training_size]
    testing_text=sentences[training_size:]

    training_labels=labels[:training_size]
    testing_labels=labels[training_size:]

    from tensorflow.keras.preprocessing.text import Tokenizer
    from tensorflow.keras.preprocessing.sequence import pad_sequences
    
    tokenizer = Tokenizer(num_words=vocab_size, oov_token=oov_tok)
    tokenizer.fit_on_texts(training_text)
    
    train_sequences = tokenizer.texts_to_sequences(training_text)
    train_sequences = np.array(pad_sequences(train_sequences, padding=trunc_type, maxlen=max_length))

    test_sequences = tokenizer.texts_to_sequences(testing_text)
    test_sequences = np.array(pad_sequences(test_sequences, padding=trunc_type, maxlen=max_length))

    training_labels=np.array(training_labels)
    testing_labels=np.array(testing_labels)

    model = tf.keras.Sequential([
        tf.keras.layers.Embedding(vocab_size, embedding_dim, input_length=max_length),
        tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(64,return_sequences=True)),
        tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(32)),
        tf.keras.layers.Flatten(),
        tf.keras.layers.Dense(64, activation='relu'),
        tf.keras.layers.Dropout(0.2),
        tf.keras.layers.Dense(32, activation='relu'),
        tf.keras.layers.Dense(1, activation='sigmoid')  
    ])

    model.compile(loss='binary_crossentropy',
                  optimizer='adam',
                  metrics=['accuracy'])

    num_epochs = 20
    history = model.fit(train_sequences, training_labels,validation_data=(test_sequences,testing_labels), epochs=num_epochs, verbose=2)
    return model


# The code below is to save your model as a .h5 file.
# It will be saved automatically in your Submission folder.
if __name__ == '__main__':
    model = solution_C4()
    model.save("model_C4.h5")