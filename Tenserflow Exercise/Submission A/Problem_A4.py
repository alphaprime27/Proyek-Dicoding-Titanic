# -*- coding: utf-8 -*-
"""Problem_A4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1t9fAWT8-Y-saVGp8zE3iF-MUML5kTcvj
"""

# ==========================================================================================================
# PROBLEM A4
#
# Build and train a binary classifier for the IMDB review dataset.
# The classifier should have a final layer with 1 neuron activated by sigmoid.
# Do not use lambda layers in your model.
#
# The dataset used in this problem is originally published in http://ai.stanford.edu/~amaas/data/sentiment/
#
# Desired accuracy and validation_accuracy > 83%
# ===========================================================================================================

import tensorflow as tf
import tensorflow_datasets as tfds
import numpy as np
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences

def solution_A4():
    imdb, info = tfds.load("imdb_reviews", with_info=True, as_supervised=True)
    # YOUR CODE HERE
    training_sentences = []
    training_labels = []
    testing_sentences = []
    testing_labels = []
    train_data=imdb['train']
    test_data=imdb['test']
    
    for s, l in train_data:
        training_sentences.append(s.numpy().decode('utf8'))
        training_labels.append(l.numpy())

    for s, l in test_data:
        testing_sentences.append(s.numpy().decode('utf8'))
        testing_labels.append(l.numpy())

    vocab_size = 10000
    embedding_dim = 16
    max_length = 120
    trunc_type='post'
    oov_tok = "<OOV>"
    
    tokenizer =  Tokenizer(num_words=vocab_size, oov_token=oov_tok)# YOUR CODE HERE

    tokenizer.fit_on_texts(training_sentences) 
    tokenizer.fit_on_texts(testing_sentences)
    
    sekuens_latih = tokenizer.texts_to_sequences(training_sentences)
    sekuens_test = tokenizer.texts_to_sequences(testing_sentences)
    
    pad_train = pad_sequences(sekuens_latih,maxlen=max_length,truncating = trunc_type)
    pad_test= pad_sequences(sekuens_test,maxlen=max_length,truncating = trunc_type)
    training_labels = np.asarray(training_labels)
    testing_labels = np.asarray(testing_labels)
    model = tf.keras.Sequential([
        # YOUR CODE HERE. Do not change the last layer.
        tf.keras.layers.Embedding(vocab_size, embedding_dim, input_length=max_length),
        tf.keras.layers.GlobalAveragePooling1D(),
        tf.keras.layers.Dense(32, activation='relu'),
        tf.keras.layers.Dense(1, activation='sigmoid')
    ])
    
    model.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])
    num_epochs = 30
    history = model.fit(pad_train, training_labels, epochs=num_epochs, 
                    validation_data=(pad_test, testing_labels), verbose=2)
    return model

# The code below is to save your model as a .h5 file.
# It will be saved automatically in your Submission folder.
if __name__ == '__main__':
    model = solution_A4()
    model.save("model_A4.h5")

